(* This is the grammar description using EBNF. *)

expression  = literal | unary | binary | grouping;

literal     = NUMBER | STRING | "true" | "false" | "nil";
grouping    = "(" expression ")";
unary       = ("-" | "!") expression;
binary      = expression operator expression;
operator    = "==" | "!=" | "<" | "<=" | ">" | ">="
            | "+"  | "-"  | "*" | "/" ;


program     = declaration* EOF;
declaration = varDecl
            | statement;
(* Note that in class hierarchy, Var is subclass of Stmt. *)
varDecl     = "var" IDENTIFIER ("=" expression)? ";";
statement   = exprStmt
            | ifStmt
            | printStmt
            | block;
exprStmt    = expression ";";
ifStmt      = "if" "(" expression ")" statement
            ("else" statement)?;
printStmt   = "print" expression ";";
block       = "{" declaration* "}";
expression  = assignment;
assignment  = IDENTIFIER "=" assignment
            | logic_or;
logic_or    = logic_and ("or" logic_and)*;
logic_and   = equality ("and" equality)*;
equality    = comparison (("!=" | "==") comparison)*;
comparison  = term ((">" | ">=" | "<" | "<=") term)*;
term        = factor (("-" | "+" factor))*;
factor      = unary (("/" | "*") unary)*;
unary       = ("!" | "-") unary
            | primary;
primary     = NUMBER | STRING | "true" | "false" | "nil"
            | "(" expression ")"
            | IDENTIFIER;
