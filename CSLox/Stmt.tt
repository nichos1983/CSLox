<#@ output extension=".cs" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic"#>
<#
    string ClassName = "Stmt";

    var SubclassDict = new Dictionary<string, List<KeyValuePair<string, string>>>()
    {
        {
            "Block", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("List<Stmt>", "Statements")
            }
        },
        {
            "Expression", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Expr")
            }
        },
        {
            "Function", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Name"),
                new KeyValuePair<string, string>("List<Token>", "Params"),
                new KeyValuePair<string, string>("List<Stmt>", "Body")
            }
        },
        {
            "If", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Condition"),
                new KeyValuePair<string, string>("Stmt", "ThenBranch"),
                new KeyValuePair<string, string>("Stmt?", "ElseBranch")
            }
        },
        {
            "Print", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Expr")
            }
        },
        {
            "Var", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Name"),
                new KeyValuePair<string, string>("Expr?", "Initializer")
            }
        },
        {
            "While", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Condition"),
                new KeyValuePair<string, string>("Stmt", "Body")
            }
        }
    };
#>

namespace CSLox
{
    public abstract class <#=ClassName #>
    {
        public interface Visitor<R>
        {
<# foreach(var subclass in SubclassDict) {#>
            R Visit<#= subclass.Key#>Stmt(<#= subclass.Key#> stmt);
<#}#>
        }

        public abstract R Accept<R>(Visitor<R> visitor);

<# foreach(var subclass in SubclassDict) {#>
        public class <#= subclass.Key#> : <#=ClassName #>
        {
<# foreach(var kv in subclass.Value) {#>
            public readonly <#= kv.Key#> <#= kv.Value#>;
<#}#>

<#
            List<string> paramList = new List<string>();
            foreach(var kv in subclass.Value)
            {
                paramList.Add(kv.Key + " @" + kv.Value.ToLower());
            }
#>
            public <#= subclass.Key#>(<#= String.Join(", ", paramList)#>)
            {
<# foreach(var kv in subclass.Value) {#>
                <#= kv.Value#> = @<#= kv.Value.ToLower()#>;
<#}#>
            }

            public override R Accept<R>(Visitor<R> visitor)
            {
                return visitor.Visit<#= subclass.Key#>Stmt(this);
            }
        }

<#}#>
    }
}