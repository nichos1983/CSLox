<#@ output extension=".cs" #>
<#@ import namespace="System"#>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic"#>
<#
    string ClassName = "Expr";

    var SubclassDict = new Dictionary<string, List<KeyValuePair<string, string>>>()
    {
        {
            "Literal", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("object?", "Value")
            }
        },
        {
            "Logical", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Left"),
                new KeyValuePair<string, string>("Token", "Operator"),
                new KeyValuePair<string, string>("Expr", "Right")
            }
        },
        {
            "Set", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Object"),
                new KeyValuePair<string, string>("Token", "Name"),
                new KeyValuePair<string, string>("Expr", "Value")
            }
        },
        {
            "Super", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Keyword"),
                new KeyValuePair<string, string>("Token", "Method")
            }
        },
        {
            "This", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Keyword")
            }
        },
        {
            "Unary", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Operator"),
                new KeyValuePair<string, string>("Expr", "Right")
            }
        },
        {
            "Binary", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Left"),
                new KeyValuePair<string, string>("Token", "Operator"),
                new KeyValuePair<string, string>("Expr", "Right")
            }
        },
        {
            "Function", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("List<Token>", "Params"),
                new KeyValuePair<string, string>("List<Stmt>", "Body")
            }
        },
        {
            "Call", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Callee"),
                new KeyValuePair<string, string>("Token", "Paren"),
                new KeyValuePair<string, string>("List<Expr>", "Arguments")
            }
        },
        {
            "Get", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Object"),
                new KeyValuePair<string, string>("Token", "Name")
            }
        },
        {
            "Grouping", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Expr", "Expression")
            }
        },
        {
            "Variable", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Name")
            }
        }
        ,
        {
            "Assign", new List<KeyValuePair<string, string>>{
                new KeyValuePair<string, string>("Token", "Name"),
                new KeyValuePair<string, string>("Expr", "Value")
            }
        }
    };
#>

namespace CSLox
{
    public abstract class <#=ClassName #>
    {
        public interface Visitor<R>
        {
<# foreach(var subclass in SubclassDict) {#>
            R Visit<#= subclass.Key#>Expr(<#= subclass.Key#> expr);
<#}#>
        }

        public abstract R Accept<R>(Visitor<R> visitor);

<# foreach(var subclass in SubclassDict) {#>
        public class <#= subclass.Key#> : <#=ClassName #>
        {
<# foreach(var kv in subclass.Value) {#>
            public readonly <#= kv.Key#> <#= kv.Value#>;
<#}#>

<#
            List<string> paramList = new List<string>();
            foreach(var kv in subclass.Value)
            {
                paramList.Add(kv.Key + " @" + kv.Value.ToLower());
            }
#>
            public <#= subclass.Key#>(<#= String.Join(", ", paramList)#>)
            {
<# foreach(var kv in subclass.Value) {#>
                <#= kv.Value#> = @<#= kv.Value.ToLower()#>;
<#}#>
            }

            public override R Accept<R>(Visitor<R> visitor)
            {
                return visitor.Visit<#= subclass.Key#>Expr(this);
            }
        }

<#}#>
    }
}